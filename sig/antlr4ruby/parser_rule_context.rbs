
module Antlr4ruby
  class ParserRuleContext < RuleContext
    EMPTY: ParserRuleContext

    @children: Array[_ParseTree]
    @start: _Token
    @stop: _Token
    @exception: RecognitionException

    attr_accessor children: Array[_ParseTree]

    attr_accessor exception: RecognitionException
    attr_accessor start: _Token

    attr_accessor stop: _Token

    def initialize: (ParserRuleContext?, Integer) -> void

    def add_any_child: (untyped) -> _ParseTree

    def add_child: (RuleContext | TerminalNode) -> (RuleContext | TerminalNode)

    def add_error_node: (ErrorNode) -> ErrorNode

    def copy_from: (ParserRuleContext) -> void

    # def enter_rule: (_ParseTreeListener) -> void

    # def exit_rule: (_ParseTreeListener) -> void

    def get_start: -> _Token

    def get_stop: -> _Token

    def get_token: (Integer, Integer) -> TerminalNode?

    def get_tokens: (Integer) -> Array[TerminalNode]

    def remove_last_child: -> void

    def to_info_string: (Parser) -> String

    def get_parent: -> ParserRuleContext?

    def get_child: (Integer, Class?) -> _ParseTree?

    def get_rule_context: (Class, Integer) -> RuleContext?

    def get_rule_contexts: (Class) -> Array[RuleContext]

  end
end