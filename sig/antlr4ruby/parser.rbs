
module Antlr4ruby
  class Parser < Recognizer[_Token, ParserATNSimulator]

    class TraceListener
      include _ParseTreeListener
    end

    class TrimToSizeListener
      include _ParseTreeListener
    end

    attr_accessor build_parse_trees: bool
    attr_accessor ctx: ParserRuleContext
    attr_accessor err_handler: _ANTLRErrorStrategy
    attr_accessor input: _TokenStream?
    attr_accessor matched_eof: bool
    attr_accessor parse_listeners: Array[_ParseTreeListener]
    attr_reader precedence_stack: Array[Integer]

    attr_accessor syntax_errors: Integer

    def add_contex_to_parse_tree: -> void

    def add_parse_listener: (_ParseTreeListener) -> void

    def consume: -> _Token

    def create_terminal_node: (ParserRuleContext, _Token) -> _TerminalNode

    def dump_dfa: -> void

    def get_input_stream: () -> _TokenStream

    def enter_recursion_rule: (ParserRuleContext, Integer, Integer, Integer) -> void

    def enter_rule: (ParserRuleContext?, Integer?, Integer?) -> void

    def get_atn_with_bypass_alts: -> ATN

    def get_build_parse_tree: -> bool

    def get_context: -> ParserRuleContext

    def get_current_token: -> _Token

    def get_dfa_strings: -> Array[String]

    def get_error_handler: -> _ANTLRErrorStrategy

    def get_expected_tokens: -> RangeSet[Integer]

    def get_expected_tokens_within_current_rule: -> RangeSet[Integer]

    def get_invoking_context: (Integer) -> ParserRuleContext

    def get_parse_listeners: -> Array[_ParseTreeListener]

    def get_precedence: -> Integer

    def get_rule_context: -> ParserRuleContext

    def get_rule_index: (String) -> Integer

    def get_rule_invocation_stack: (RuleContext?) -> Array[String]

    def get_source_name: -> String

    def get_syntax_error_count: -> Integer

    def get_token_stream: -> _TokenStream

    def is_expected_token: (Integer) -> bool

    def is_matched_eof?: -> bool

    def match: (Integer) -> _Token

    def match_wildcard: -> _Token

    def notify_error_listeners: (String, _Token?, RecognitionException?) -> void

    def push_new_recursion_context: (ParserRuleContext, Integer, Integer) -> void

    def remove_parse_listener: (_ParseTreeListener) -> void

    def remove_parse_listeners: -> void

    def reset: -> void

    def set_build_parse_tree: (bool) -> void

    def set_context: (ParserRuleContext) -> void

    def set_error_handler: (_ANTLRErrorStrategy) -> void

    def set_profile: (bool) -> void

    def set_token_stream: (_TokenStream) -> void

    def trigger_enter_rule_event: -> void

    def trigger_exit_rule_event: -> void

    def unroll_recursion_contexts: (ParserRuleContext) -> void

    private

    attr_accessor bypass_alt_atn_cache: ATN
  end
end