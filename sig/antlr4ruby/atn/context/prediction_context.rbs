module Antlr4ruby

  # @abstract
  class PredictionContext
    EMPTY_RETURN_STATE: Integer
    INITIAL_HASH: Integer

    @@global_node_count: Integer

    def self.calculate_empty_hash_code: -> Integer

    def self.calculate_hash_code: (parent: PredictionContext?, parents: Array[PredictionContext], return_state: Integer, return_states: Array[Integer]) -> Integer

    def self.combine_common_parents: (Array[PredictionContext]) -> void

    def self.from_rule_context: (ATN, RuleContext) -> PredictionContext

    def self.get_all_context_nodes: (PredictionContext) -> Array[PredictionContext]

    def self.get_all_context_nodes_: (PredictionContext, Array[PredictionContext], Hash[PredictionContext, PredictionContext]) -> void

    def self.get_cached_context: (PredictionContext, PredictionContextCache, Hash[Integer, PredictionContext]) -> PredictionContext

    def self.merge: (PredictionContext, PredictionContext, bool, Hash[PredictionContext, Hash[PredictionContext, PredictionContext]]) -> PredictionContext

    def self.merge_arrays: (ArrayPredictionContext, ArrayPredictionContext, bool, Hash[PredictionContext, Hash[PredictionContext, PredictionContext]]) -> PredictionContext

    def self.merge_root: (SingletonPredictionContext, SingletonPredictionContext, bool) -> PredictionContext

    def self.merge_singletons: (SingletonPredictionContext, SingletonPredictionContext, bool, Hash[PredictionContext, Hash[PredictionContext, PredictionContext]]) -> PredictionContext

    def self.to_dot_string: (PredictionContext) -> String

    attr_reader cached_hash_code: Integer
    attr_reader id: Integer

    def initialize: (Integer) -> void

    def get_parent: (Integer) -> PredictionContext?

    def get_return_state: (Integer) -> Integer

    def has_empty_path?: -> bool

    def is_empty?: -> bool

    def size: -> Integer

    def to_s: (Recognizer[untyped, untyped]) -> String
  end

end
